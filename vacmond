#!/usr/bin/python
#
#  vacmond - Vac monitoring daemon 
#
#  Andrew McNab, University of Manchester.
#  Copyright (c) 2013-8. All rights reserved.
#
#  Redistribution and use in source and binary forms, with or
#  without modification, are permitted provided that the following
#  conditions are met:
#
#    o Redistributions of source code must retain the above
#      copyright notice, this list of conditions and the following
#      disclaimer. 
#    o Redistributions in binary form must reproduce the above
#      copyright notice, this list of conditions and the following
#      disclaimer in the documentation and/or other materials
#      provided with the distribution. 
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
#  CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
#  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
#  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
#  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
#  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
#  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
#  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
#  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.
#
#  Contacts: Andrew.McNab@cern.ch http://www.gridpp.ac.uk/vacproject/
#

import os
import errno
import sys
import json
import time
import socket
import stat
import pycurl

import vacmon

mappings = {
 "machines":
  {
    "mappings" : {
      "doc" : {
        "_source": { "enabled": False },
        "_all": { "enabled": False },
        "properties" : {
          "time_received" : {
            "type"   : "date",
            "format" : "epoch_second"
          },
          "cookie" : {
            "type" : "keyword",
            "index" : "true"
          },
          "created_time" : {
            "type"   : "date",
            "format" : "epoch_second"
          },
          "cpu_percentage" : {
            "type" : "double"
          },
          "cpu_seconds" : {
            "type" : "long"
          },
          "daemon_version" : {
            "type" : "keyword",
            "index" : "true"
          },
          "factory" : {
            "type" : "keyword",
            "index" : "true"
          },
          "fqan" : {
            "type" : "keyword",
            "index" : "true"
          },
          "heartbeat_time" : {
            "type"   : "date",
            "format" : "epoch_second"
          },
          "hs06" : {
            "type" : "double"
          },
          "machine" : {
            "type" : "keyword",
            "index" : "true"
          },
          "machinetype" : {
            "type" : "keyword",
            "index" : "true"
          },
          "machine_model" : {
            "type" : "keyword",
            "index" : "true"
          },
          "message_type" : {
            "type" : "keyword",
            "index" : "true"
          },
          "num_machines" : {
            "type" : "long"
          },
          "num_processors" : {
            "type" : "long"
          },
          "shutdown_message" : {
            "type" : "keyword",
            "index" : "true"
          },
          "shutdown_time" : {
            "type"   : "date",
            "format" : "epoch_second"
          },
          "site" : {
            "type" : "keyword",
            "index" : "true"
          },
          "space" : {
            "type" : "keyword",
            "index" : "true"
          },
          "started_time" : {
            "type"   : "date",
            "format" : "epoch_second"
          },
          "state" : {
            "type" : "keyword",
            "index" : "true"
          },
          "time_sent" : {
            "type"   : "date",
            "format" : "epoch_second"
          },
          "uuid" : {
            "type" : "keyword",
            "index" : "true"
          },
          "vacquery_version" : {
            "type" : "keyword",
            "index" : "true"
          },
          "vo" : {
            "type" : "keyword",
            "index" : "true"
          }
        }
      }
    }
  },
 "machinetypes":
  {
    "mappings" : {
      "doc" : {
        "_source": { "enabled": False },
        "_all": { "enabled": False },
        "properties" : {
          "time_received" : {
            "type"   : "date",
            "format" : "epoch_second"
          },
          "cookie" : {
            "type" : "keyword",
            "index" : "true"
          },
          "daemon_version" : {
            "type" : "keyword",
            "index" : "true"
          },
          "factory" : {
            "type" : "keyword",
            "index" : "true"
          },
          "fqan" : {
            "type" : "keyword",
            "index" : "true"
          },
          "machinetype" : {
            "type" : "keyword",
            "index" : "true"
          },
          "message_type" : {
            "type" : "keyword",
            "index" : "true"
          },
          "num_before_fizzle" : {
            "type" : "long"
          },
          "num_machinetypes" : {
            "type" : "long"
          },
          "shutdown_machine" : {
            "type" : "keyword",
            "index" : "true"
          },
          "shutdown_message" : {
            "type" : "keyword",
            "index" : "true"
          },
          "shutdown_time" : {
            "type"   : "date",
            "format" : "epoch_second"
          },
          "site" : {
            "type" : "keyword",
            "index" : "true"
          },
          "space" : {
            "type" : "keyword",
            "index" : "true"
          },
          "time_sent" : {
            "type"   : "date",
            "format" : "epoch_second"
          },
          "running_hs06" : {
            "type" : "double"
          },
          "running_machines" : {
            "type" : "long"
          },
          "running_processors" : {
            "type" : "long"
          },
          "max_wallclock_seconds" : {
            "type" : "long"
          },
          "min_wallclock_seconds" : {
            "type" : "long"
          },
          "max_processors" : {
            "type" : "long"
          },
          "min_processors" : {
            "type" : "long"
          },
          "bytes_per_processor" : {
            "type" : "long"
          },
          "vacquery_version" : {
            "type" : "keyword",
            "index" : "true"
          },
          "vo" : {
            "type" : "keyword",
            "index" : "true"
          }
        }
      }
    }
  },
 "factories":
  {
    "mappings" : {
      "doc" : {
        "_source": { "enabled": False },
        "_all": { "enabled": False },
        "properties" : {
          "time_received" : {
            "type"   : "date",
            "format" : "epoch_second"
          },
          "boot_time" : {
            "type"   : "date",
            "format" : "epoch_second"
          },
          "cookie" : {
            "type" : "keyword",
            "index" : "true"
          },
          "factory" : {
            "type" : "keyword",
            "index" : "true"
          },
          "factory_heartbeat_time" : {
            "type"   : "date",
            "format" : "epoch_second"
          },
          "kernel_version" : {
            "type" : "keyword",
            "index" : "true"
          },
          "load_average" : {
            "type" : "double"
          },
          "mem_total_kb" : {
            "type" : "long"
          },
          "mem_used_kb" : {
            "type" : "long"
          },
          "message_type" : {
            "type" : "keyword",
            "index" : "true"
          },
          "metadata_heartbeat_time" : {
            "type"   : "date",
            "format" : "epoch_second"
          },
          "mjf_heartbeat_time" : {
            "type"   : "date",
            "format" : "epoch_second"
          },
          "os_issue" : {
            "type" : "keyword",
            "index" : "true"
          },
          "responder_heartbeat_time" : {
            "type"   : "date",
            "format" : "epoch_second"
          },
          "root_disk_avail_inodes" : {
            "type" : "long"
          },
          "root_disk_avail_kb" : {
            "type" : "long"
          },
          "running_processors" : {
            "type" : "long"
          },
          "running_hs06" : {
            "type" : "double"
          },
          "running_machines" : {
            "type" : "long"
          },
          "site" : {
            "type" : "keyword",
            "index" : "true"
          },
          "space" : {
            "type" : "keyword",
            "index" : "true"
          },
          "swap_free_kb" : {
            "type" : "long"
          },
          "swap_used_kb" : {
            "type" : "long"
          },
          "time_sent" : {
            "type"   : "date",
            "format" : "epoch_second"
          },
          "max_processors" : {
            "type" : "long"
          },
          "max_hs06" : {
            "type" : "double"
          },
          "max_machines" : {
            "type" : "long"
          },
          "daemon_disk_avail_inodes" : {
            "type" : "long"
          },
          "daemon_disk_avail_kb" : {
            "type" : "long"
          },
          "daemon_version" : {
            "type" : "keyword",
            "index" : "true"
          },
          "vacquery_version" : {
            "type" : "keyword",
            "index" : "true"
          }
        }
      }      
    }
  }
};

def createIndexes(curl):
   # Try to create indexes in case they don't already exist

   for indexName in mappings:
   
     curl.setopt(pycurl.URL, 'http://localhost:9200/' + indexName)
     curl.setopt(pycurl.CUSTOMREQUEST, "PUT")
     curl.setopt(pycurl.HTTPHEADER, ["Content-type: application/json"])
     curl.setopt(pycurl.POSTFIELDS, json.dumps(mappings[indexName]))
     curl.perform()
     print
   
def processFactory(curl, jsonMessage, id):

   curl.setopt(pycurl.URL, 'http://localhost:9200/factories/doc/' + id)
   curl.setopt(pycurl.CUSTOMREQUEST, "PUT")
   curl.setopt(pycurl.HTTPHEADER, ["Content-type: application/json"])
   curl.setopt(pycurl.POSTFIELDS, jsonMessage)
   curl.perform()
   print
   
def processMachinetype(curl, jsonMessage, id):

   curl.setopt(pycurl.URL, 'http://localhost:9200/machinetypes/doc/' + id)
   curl.setopt(pycurl.CUSTOMREQUEST, "PUT")
   curl.setopt(pycurl.HTTPHEADER, ["Content-type: application/json"])
   curl.setopt(pycurl.POSTFIELDS, jsonMessage)
   curl.perform()
   print

def processMachine(curl, jsonMessage, id):

   curl.setopt(pycurl.URL, 'http://localhost:9200/machines/doc/' + id)
   curl.setopt(pycurl.CUSTOMREQUEST, "PUT")
   curl.setopt(pycurl.HTTPHEADER, ["Content-type: application/json"])
   curl.setopt(pycurl.POSTFIELDS, jsonMessage)
   curl.perform()
   print

def vacmonListener():

   si = file('/dev/null', 'r')
   os.dup2(si.fileno(), sys.stdin.fileno())

   so = file('/var/log/vacmond', 'a+')
   os.dup2(so.fileno(), sys.stdout.fileno())
          
   se = file('/var/log/vacmond', 'a+', 0)
   os.dup2(se.fileno(), sys.stderr.fileno())
 
   vacmon.vacutils.createFile('/var/run/vacmond.pid', str(os.getpid()) + '\n', stat.S_IWUSR + stat.S_IRUSR + stat.S_IRGRP + stat.S_IROTH, '/var/run')

   sock = None
   curl = pycurl.Curl()

   vacmon.vacutils.logLine('vacmon listener starts')
   
   vacmon.vacutils.setProcessName('vacmond')

   vacmon.vacutils.logLine('Create indexes if not already defined')
   createIndexes(curl)

   n = 0

   while True:
   
     try:
       close(so)
     except:
       pass
           
     so = file('/var/log/vacmond', 'a+')
     os.dup2(so.fileno(), sys.stdout.fileno())

     try:
       close(se)
     except:
       pass

     se = file('/var/log/vacmond', 'a+', 0)     
     os.dup2(se.fileno(), sys.stderr.fileno())

     if sock is None:
       sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
       sock.settimeout(60.0)

       try:
         sock.bind(('', 8884))
       except Exception as e:
         sock = None
         vac.vacutils.logLine('Failed to bind to vacmond port 8884: ' + str(e))
         time.sleep(60.0)
         continue

     try:
       pr = open('/var/run/vacmond.pid', 'r')
       pid = int(pr.read().strip())
       pr.close()
       
       if pid != os.getpid():
         vac.vacutils.logLine('os.getpid ' + os.getpid() + ' does not match vacmond.pid ' + pid + ' - exiting')
         break
                
     except:
       vacmon.vacutils.logLine('no vacmond.pid - exiting')
       break

     # so log file is updated before we start waiting        
     sys.stdout.flush()
     sys.stderr.flush()

     # Update heartbeat file
     vacmon.vacutils.createFile('/var/run/vacmond.heartbeat', str(int(time.time())) + '\n', stat.S_IWUSR + stat.S_IRUSR + stat.S_IRGRP + stat.S_IROTH, '/var/run')

     try:
       jsonMessage, addr = sock.recvfrom(10240)
     except socket.error as msg:
       continue

     try:
       message = json.loads(jsonMessage)
     except:
       vacmon.vacutils.logLine('Failed to parse %s (len=%d)' % (str(jsonMessage), len(jsonMessage)))
       continue
       
     message['time_received'] = int(time.time())
#     if message['time_received'] % 5 != 0:
#       # We only process 1 in 5 messages!
#       continue

     id = str(time.time()) + '.' + str(n)
     n += 1

     vacmon.vacutils.logLine('Composing document %s from json len=%d' % (id, len(jsonMessage)))

     # Fix up shared deprecated/changed key names
     if 'daemon_version' not in message and 'vac_version' in message:
       message['daemon_version'] = message['vac_version']
  
     if 'running_processors' not in message and 'running_cpus' in message:
       message['running_processors'] = message['running_cpus']
  
     if 'message_type' in message and message['message_type'] == 'factory_status':
       # Fix up non-shared deprecated/changed key names
       if 'max_processors' not in message and 'total_cpus' in message:
         message['max_processors'] = message['total_cpus']

       if 'max_machines' not in message and 'total_machines' in message:
         message['max_machines'] = message['total_machines']

       if 'max_hs06' not in message and 'total_hs06' in message:
         message['max_hs06'] = message['total_hs06']

       if 'daemon_disk_avail_kb' not in message and 'vac_disk_avail_kb' in message:
         message['daemon_disk_avail_kb'] = message['vac_disk_avail_kb']

       if 'daemon_disk_avail_inodes' not in message and 'vac_disk_avail_inodes' in message:
         message['daemon_disk_avail_inodes'] = message['vac_disk_avail_inodes']

       vacmon.vacutils.logLine(str(message))

       # Now actually save the message
       try:
         processFactory(curl, json.dumps(message), id)
       except Exception as e:
         vacmon.vacutils.logLine('factory_status processFactory() fails with %s' % str(e))

     elif 'message_type' in message and message['message_type'] == 'machinetype_status':

       if 'fqan' in message and message['fqan'][0] == '/':
         message['vo'] = message['fqan'].split('/')[1]

       if 'running_processors' not in message and 'running_cpus' in message:
         message['running_processors'] = message['running_cpus']
  
       if 'running_machines' not in message and 'total_machines' in message:
         message['running_machines'] = message['total_machines']
  
       if 'running_hs06' not in message and 'total_hs06' in message:
         message['running_hs06'] = message['total_hs06']
  
       vacmon.vacutils.logLine(str(message))

       # Now actually save the message
       try:
         processMachinetype(curl, json.dumps(message), id)
       except Exception as e:
         vacmon.vacutils.logLine('machinetype_status processMachinetype() fails with %s' % str(e))
          
     elif 'message_type' in message and message['message_type'] == 'machine_status':

       if 'fqan' in message and message['fqan'][0] == '/':
         message['vo'] = message['fqan'].split('/')[1]

       vacmon.vacutils.logLine(str(message))

       # Now actually save the message
       try:
         processMachine(curl, json.dumps(message), id)
       except Exception as e:
         vacmon.vacutils.logLine('machine_status processMachine() fails with %s' % str(e))
          
   sys.exit(0) # if we break out of while loop then we exit

#
# PROGRAM MAIN !!!
# 

if __name__ == '__main__':

    if (os.fork() != 0):
      sys.exit() # first parent

    os.chdir("/")
    os.setsid()
    os.umask(0) 

    if os.fork() != 0:
      sys.exit() # second parent

    vacmonListener()
          